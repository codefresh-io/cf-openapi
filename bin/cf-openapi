#!/usr/bin/env node

const os = require('os');
const path = require('path');
const fs = require('fs');
const program = require('commander');
const lint = require('speccy/lint.js');


const { components: { processor } } = require('../index');
const sdkValidator = require('./sdkValidator');

const tmpFile = path.resolve(os.tmpdir(), 'openapi.json');
const speccyRelativeRulesPath = '../../@codefresh-io/cf-openapi/validation-rules';


function collect(val, item) {
    item.push(val);
    return item;
}

program
    .version('1.0.0')
    .usage('<command>')
    .option('-c, --config [configFile]', 'config file (containing JSON/YAML). See README for potential values.');

program
    .command('lint [file-or-url]')
    .description('ensure specs are not just valid OpenAPI, but lint against specified rules')
    .option('-q, --quiet', 'reduce verbosity')
    .option('-p, --postprocessed', 'whether to postprocess')
    .option('-r, --rules [ruleFile]', 'provide multiple rules files', collect, [speccyRelativeRulesPath])
    .option('-s, --skip [ruleName]', 'provide multiple rules to skip', collect, [])
    .option('-j, --json-schema', 'treat $ref like JSON Schema and convert to OpenAPI Schema Objects (default: false)')
    .option('-v, --verbose', 'increase verbosity')
    .action((specFile, cmd) => {
        let specPath = specFile || './openapi.json';
        specPath = path.resolve(process.cwd(), specPath);

        try {
            if (!require.resolve(specPath)) {
                throw new Error(`No spec file by path: ${specPath}`);
            }
            const openapi = require(specPath); // eslint-disable-line
            sdkValidator(openapi);

            if (cmd.postprocessed) {
                fs.writeFileSync(tmpFile, JSON.stringify(processor.postprocess(openapi)));
                specPath = tmpFile;
                console.log(`Using saved to temporary processed spec file to validate: ${tmpFile}`);
            }
        } catch (e) {
            console.error(e.message);
            process.exit(1);
        }

        lint.command(specPath, cmd)
            .then(() => { process.exit(0); })
            .catch((err) => {
                if (err) console.error(err);
                process.exit(1);
            });
    });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
    program.help();
}
